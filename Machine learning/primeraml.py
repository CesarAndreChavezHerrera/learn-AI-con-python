# -*- coding: utf-8 -*-
"""primeraML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ISd3iiRcQtCGduFDqFZUNXt9H1NnjmxZ
"""

import torch
import numpy as np
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt

"""---
#data set

---

problema a predecir es el precio de un auto por cuantas unidades hay
"""

#@title Texto de t√≠tulo predeterminado

Car_prices = [5   ,6 ,7    ,8  ,9  ,10 ]
units_sold = [8.5 ,8 ,7.0  ,6  ,5  , 4 ]

plt.scatter(Car_prices,units_sold)

"""#crear tensores
---
"""

#trasformar  a array de numpy
prices_array = np.array(Car_prices).reshape(-1,1)
units_array = np.array(units_sold).reshape(-1,1)
prices_array
#units_array

#trasformar a tensores 

prices = torch.from_numpy(prices_array).float().requires_grad_(True)
units = torch.from_numpy(units_array).float()
prices.shape

"""#entrenar 

---
"""

#cuando terminde de entrenar aqui es donde se mete el valo como tensor
model = nn.Linear(1,1)  


loss_function = nn.MSELoss()
optimizer = optim.SGD(model.parameters(),lr=0.015)

losses = []
iteration = 4000

for i in range(iteration):
  pred = model(prices)
  loss = loss_function(pred, units)
  losses.append(loss.data)

  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

print(loss)

plt.plot(range(iteration),losses)

x = torch.Tensor([[0]])
p = model(x)
p